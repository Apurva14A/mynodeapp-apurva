# name: Build and Deploy the application
# on:
#   - push
# jobs:
#   job1:
#     runs-on: ubuntu-latest
#     name: setup and deploy
#     steps:
#       - name: start minikube
#         id: minikube
#         uses: medyagh/setup-minikube@latest
#       # now you can run kubectl to see the pods in the cluster
#       - name: Check cluster
#         run: kubectl get pods -A
#       - name: Build image
#         run: |
#           export SHELL=/bin/bash
#           eval $(minikube -p minikube docker-env)
#           docker build -t nodeapp:latest .
#       - name: Push the image
#         run: docker push nodeapp:latest
#       - name: Deploy to cluster
#         run: kubectl apply -f ./deployment.yaml
#       - name: Accessing the service
#         run: |
#             minikube service list
#             minikube service nodeservice --url
#             echo "launching the service"
#             curl $(minikube service nodeservice --url )

name: Docker Build and Deploy
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: kundankkkrishna/finalapp:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
#     steps:
#       - name: Deploy to remote server via SSH
#         uses: appleboy/ssh-action@master
#         env:
#           SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
#         with:
#           host: 65.0.184.214
#           username: ubuntu
#           port: 22
#           script: |
#             echo "$SSH_KEY" > deploy_key
#             chmod 400 deploy_key
#             ssh -o StrictHostKeyChecking=no -i deploy_key ubuntu@65.0.184.214 -p 22 "docker pull kundankkkrishna/finalapp:latest && \
#             docker stop nodeappcontainer || true \
#             docker rm nodeappcontainer || true \
#             docker run -d --name nodeappcontainer -p 80:80 kundankkkrishna/finalapp:latest"
            
            
    steps:
      - name: Install SSH client
        run: sudo apt-get install -qq openssh-client

      - name: Deploy to EC2 instance via SSH
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKER_HUB_PASSWORD }}
        run: |
          # Install AWS CLI (if necessary)
          #sudo apt-get install -qq awscli

          # Copy the private key to a file and set appropriate permissions
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # SSH into the EC2 instance and run Docker commands
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@65.0.184.214 -p 22 '
            # Pull the latest image from Docker Hub
            docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
            docker pull kundankkkrishna/finalapp:latest

            # Stop and remove the existing container
            docker stop appcontainer || true
            docker rm appcontainer || true

            # Run the new container
            docker run -d --name appcontainer -p 80:80 kundankkkrishna/finalapp:latest
            '
